INCLUDE "hardware.inc"

; Box is the first object in OAM
DEF BOX		EQU _OAMRAM
DEF BOX_X   EQU BOX + OAMA_X
DEF BOX_Y   EQU BOX + OAMA_Y

SECTION "Header", ROM0[$100]

	jp EntryPoint

	ds $150 - @, 0 ; Make room for the header

EntryPoint:
	; Program starts here

WaitVBlank:
	ld a, [rLY]
	cp 144 
	jp c, WaitVBlank 

	; Turn the LCD off
	ld a, 0
	ld [rLCDC], a

	; Copy the tile data
	ld de, Tiles
	ld hl, _VRAM9000
	ld bc, TilesEnd - Tiles
	call Memcopy

	; Copy the tilemap
	ld de, Tilemap
	ld hl, _SCRN0
	ld bc, TilemapEnd - Tilemap
	call Memcopy

; Clear the Object Attribute Memory (OAM)
	ld a, 0	  ; We want to initialize OAM to 0. Store 0 into register a
	ld b, 160 ; OAM is always 160 bytes long, store this size into register b
	ld hl, _OAMRAM ; store the _OAMRAM register address into hl
ClearOam:
	ld [hli], a ; Fill the current OAM byte with 0 (we stored 0 into register a earlier)
	dec b
	jp nz, ClearOam
 
 	ld de, Box 
 	ld hl, _VRAM8000 ; Address of our first non-shared tile (tile index 0)
 	ld bc, BoxEnd - Box 
	call Memcopy

; Draw the object
	ld hl, _OAMRAM
	ld a, 128 + 16 
	ld [hli], a    ; Store the object's Y value
	ld a, 16 + 8   ; 
	ld [hli], a    ; Store the object's X value
	ld a, 0		   ; Store 0 in register a
	ld [hli], a    ; Set Object's Tile ID to 0
	ld [hl], a	   ; Set Object's Attributes to 0

; Turn the LCD on, with objects enabled
	ld a, LCDCF_ON | LCDCF_BGON | LCDCF_OBJON
	ld [rLCDC], a ; Store flags stored into a into our rLCDC register

	; During the first (blank) frame, initialize the display registers
	ld a, %11100100
	ld [rBGP], a    ; rBGP -- register for background palette data
	ld a, %11100100
	ld [rOBP0], a   ; r0BP0 -- register for Object palette data 0 -- what does this mean??
	
	; Initialize wFrameCounter=0
	ld a, 0
	ld [wFrameCounter], a
	ld [moveDirection], a

Main: 
	; Wait until it's *not* VBlank
	ld a, [rLY] ; register for LCDC Y-Coordinate
	cp 144      ; compare register a-144
	jp nc, Main ; Repeat main loop while a < 144

WaitVBlank2:
	ld a, [rLY]
	cp 144
	jp c, WaitVBlank2
	
	; Increment wFrameCounter
	ld a, [wFrameCounter]
	inc a
	ld [wFrameCounter], a

	cp a, 5 ; Every 5 frames 
	jp nz, Main

	; Reset the frame counter back to 0
	ld a, 0
	ld [wFrameCounter], a

	; Move left if moveDirection = 1
	ld a, [moveDirection]
	cp 0
	call z, MoveLeft

	cp 1
	call z, MoveRight

	jp Main

; Change direction to left when we reach object_0.X = $A0
; Change direction to right when we reach object_0.X = $07
MoveRight:
	ld a, [BOX_X]
	inc a
	ld [BOX_X], a

	cp $A0
	call z, SetLeft
	ret

MoveLeft:
	ld a, [BOX_X]
	dec a
	ld [BOX_X], a
	
	cp $08
	call z, SetRight
	ret

SetRight:
	ld a, 1
	ld [moveDirection], a
	ret

SetLeft:
	ld a, 0
	ld [moveDirection], a
	ret
	
Memcopy:
	ld a, [de]
	ld [hli], a 	  ; Load byte into value at hl
	inc de			  ; Point to next tetronimo byte
	dec bc 			  ;
	ld a, b     	  ; Load b into a to check if we've reached 0 yet
	or a, c     	  ; Set's 0 flag if we reached 0
	jp nz, Memcopy; Continue loop until we finished copying all tetronimo bytes
	ret

Tiles:
	; $00
	dw `00000000
	dw `00000000
	dw `00000000
	dw `00000000
	dw `00000000
	dw `00000000
	dw `00000000
	dw `00000000
	; $01
	dw `33333333
	dw `31111113
	dw `31111113
	dw `31111113
	dw `31111113
	dw `31111113
	dw `31111113
	dw `33333333
TilesEnd:

Tilemap:
	db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, 0,0,0,0,0,0,0,0,0,0,0,0,
	db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, 0,0,0,0,0,0,0,0,0,0,0,0,
	db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, 0,0,0,0,0,0,0,0,0,0,0,0,
	db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, 0,0,0,0,0,0,0,0,0,0,0,0,
	db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, 0,0,0,0,0,0,0,0,0,0,0,0,
	db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, 0,0,0,0,0,0,0,0,0,0,0,0,
	db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, 0,0,0,0,0,0,0,0,0,0,0,0,
	db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, 0,0,0,0,0,0,0,0,0,0,0,0,
	db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, 0,0,0,0,0,0,0,0,0,0,0,0,
	db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, 0,0,0,0,0,0,0,0,0,0,0,0,
	db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, 0,0,0,0,0,0,0,0,0,0,0,0,
	db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, 0,0,0,0,0,0,0,0,0,0,0,0,
	db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, 0,0,0,0,0,0,0,0,0,0,0,0,
	db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, 0,0,0,0,0,0,0,0,0,0,0,0,
	db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, 0,0,0,0,0,0,0,0,0,0,0,0,
	db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, 0,0,0,0,0,0,0,0,0,0,0,0,
	db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, 0,0,0,0,0,0,0,0,0,0,0,0,
	db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, 0,0,0,0,0,0,0,0,0,0,0,0,
TilemapEnd:

Box:
	dw `33333333
	dw `31111113
	dw `31111113
	dw `31111113
	dw `31111113
	dw `31111113
	dw `31111113
	dw `33333333
BoxEnd:

; =======DECLARING GLOBAL VARIABLES=========
SECTION "Counter", WRAM0
wFrameCounter: db
moveDirection: db
