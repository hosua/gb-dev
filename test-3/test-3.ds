INCLUDE "hardware.inc"

; Box is the first object in OAM
DEF BOX1		EQU _OAMRAM
DEF BOX1_X   	EQU BOX1 + OAMA_X
DEF BOX1_Y   	EQU BOX1 + OAMA_Y
DEF BOX1_TILEID EQU BOX1 + OAMA_TILEID
DEF BOX1_FLAGS  EQU BOX1 + OAMA_FLAGS

DEF BOX2		EQU _OAMRAM + 4
DEF BOX2_X   	EQU BOX2 + OAMA_X
DEF BOX2_Y   	EQU BOX2 + OAMA_Y
DEF BOX2_TILEID EQU BOX2 + OAMA_TILEID
DEF BOX2_FLAGS  EQU BOX2 + OAMA_FLAGS

DEF BOX3		EQU _OAMRAM + 8
DEF BOX3_X   	EQU BOX3 + OAMA_X
DEF BOX3_Y   	EQU BOX3 + OAMA_Y
DEF BOX3_TILEID EQU BOX3 + OAMA_TILEID
DEF BOX3_FLAGS  EQU BOX3 + OAMA_FLAGS

DEF BOX4		EQU _OAMRAM + 12
DEF BOX4_X   	EQU BOX4 + OAMA_X
DEF BOX4_Y   	EQU BOX4 + OAMA_Y
DEF BOX4_TILEID EQU BOX4 + OAMA_TILEID
DEF BOX4_FLAGS  EQU BOX4 + OAMA_FLAGS

SECTION "Header", ROM0[$100]

	jp EntryPoint

	ds $150 - @, 0 ; Make room for the header

EntryPoint:
	; Program starts here

WaitVBlank:
	ld a, [rLY]
	cp 144 
	jp c, WaitVBlank 

	; Turn the LCD off
	ld a, 0
	ld [rLCDC], a

	; Copy the tile data
	ld de, Tiles
	ld hl, _VRAM9000
	ld bc, TilesEnd - Tiles
	call Memcopy

	; Copy the tilemap
	ld de, Tilemap
	; https://gbdev.io/pandocs/Tile_Maps.html
	ld hl, _SCRN0
	ld bc, TilemapEnd - Tilemap
	call Memcopy

; Clear the entire Object Attribute Memory (OAM)
	ld a, 0	  ; We want to initialize OAM to 0. Store 0 into register a
	ld b, 160 ; OAM is always 160 bytes long, store this size into register b
	ld hl, _OAMRAM ; store the _OAMRAM register address into hl
ClearOam:
	ld [hli], a ; Fill the current OAM byte with 0 (we stored 0 into register a earlier)
	dec b
	jp nz, ClearOam
 
 	ld de, Box 
 	ld hl, _VRAM8000 ; Address of our first non-shared tile (tile index 0)
 	ld bc, BoxEnd - Box 
	call Memcopy

; Initialize the object
	ld hl, BOX1
	ld a, 0 + 16 
	ld [BOX1_Y], a    ; Store the object's Y value
	ld a, 46 + 8   ; 
	ld [BOX1_X], a    ; Store the object's X value
	ld a, 0		   ; Store 0 in register a
	ld [BOX1_TILEID], a    ; Set Object's Tile ID to 0
	ld [BOX1_FLAGS], a	   ; Set Object's Attributes to 0

	ld hl, BOX2
	ld a, 0 + 16 
	ld [BOX2_Y], a    ; Store the object's Y value
	ld a, 54 + 8   ; 
	ld [BOX2_X], a    ; Store the object's X value
	ld a, 0		   ; Store 0 in register a
	ld [BOX2_TILEID], a    ; Set Object's Tile ID to 0
	ld [BOX2_FLAGS], a	   ; Set Object's Attributes to 0

	ld hl, BOX3
	ld a, 8 + 16 
	ld [BOX3_Y], a    ; Store the object's Y value
	ld a, 46 + 8   ; 
	ld [BOX3_X], a    ; Store the object's X value
	ld a, 0		   ; Store 0 in register a
	ld [BOX3_TILEID], a    ; Set Object's Tile ID to 0
	ld [BOX3_FLAGS], a	   ; Set Object's Attributes to 0

	ld hl, BOX4
	ld a, 8 + 16 
	ld [BOX4_Y], a    ; Store the object's Y value
	ld a, 54 + 8   ; 
	ld [BOX4_X], a    ; Store the object's X value
	ld a, 0		   ; Store 0 in register a
	ld [BOX4_TILEID], a    ; Set Object's Tile ID to 0
	ld [BOX4_FLAGS], a	   ; Set Object's Attributes to 0

; Turn the LCD on, with objects enabled
	ld a, LCDCF_ON | LCDCF_BGON | LCDCF_OBJON
	ld [rLCDC], a ; Store flags stored into a into our rLCDC register

	; During the first (blank) frame, initialize the display registers
	ld a, %11100100
	ld [rBGP], a    ; rBGP -- register for background palette data
	ld a, %11100100
	ld [rOBP0], a   ; r0BP0 -- register for Object palette data 0 -- what does this mean??
	
	; Initialize wFrameCounter=0
	ld a, 0
	ld [wFrameCounter], a
	ld [moveDirection], a

Main: 
	; Wait until it's *not* VBlank
	ld a, [rLY] ; register for LCDC Y-Coordinate
	cp 144      ; compare register a-144
	jp nc, Main ; Repeat main loop while a < 144

WaitVBlank2:
	ld a, [rLY]
	cp 144
	jp c, WaitVBlank2

	ld a, [wFrameCounter]
	cp 15
	jp c, MovePieceDown

	; jp Main

MovePieceDown:
	;
	
	call UpdateKeys

CheckLeft:
    ld a, [wCurKeys]
    and a, PADF_LEFT
    jp z, CheckRight
MoveLeft:
    ld a, [_OAMRAM + 1]
    dec a
    jp z, Main
    ld [_OAMRAM + 1], a
    jp Main

; Then check the right button.
CheckRight:
    ld a, [wCurKeys]
    and a, PADF_RIGHT
    jp z, CheckUp
MoveRight:
    ld a, [BOX1_X]
    inc a
    jp z, Main
    ld [BOX1_X], a
    jp Main

CheckUp:
	ld a, [wCurKeys]
	and a, PADF_UP
	jp z, CheckDown
MoveUp:
	ld a, [BOX1_Y]
	dec a
	; cp $10
	jp z, Main
	ld [BOX1_Y], a
	jp Main

CheckDown:
	ld a, [wCurKeys]
	and a, PADF_DOWN
	jp z, Main
MoveDown:
	ld a, [BOX1_Y]
	inc a
	jp z, Main
	ld [BOX1_Y], a
	jp Main

UpdateKeys:
	; Poll half the controller
	ld a, P1F_GET_BTN
	call .onenibble
	ld b, a ; B7-4 = 1; B3-0 = unpressed buttons
	
	; Poll the other half
	ld a, P1F_GET_DPAD
	call .onenibble
	swap a ; A3-0 = unpressed directions; A7-4 = 1
	xor a, b ; A = pressed buttons + directions
	ld b, a ; B = pressed buttons + directions
	
	; And release the controller
	ld a, P1F_GET_NONE
	ldh [rP1], a
	
	; Combine with previous wCurKeys to make wNewKeys
	ld a, [wCurKeys]
	xor a, b ; A = keys that changed state
	and a, b ; A = keys that changed to pressed
	ld [wNewKeys], a
	ld a, b
	ld [wCurKeys], a
	ret

.onenibble
	ldh [rP1], a ; switch the key matrix
	call .knownret ; burn 10 cycles calling a known ret
	; -- No idea what the extra ldh are doing --
	; ldh a, [rP1] ; ignore value while waiting for the key matrix to settle
	; ldh a, [rP1]
	ldh a, [rP1] ; this read counts
	or a, $F0 ; A7-4 = 1; A3-0 = unpressed keys
.knownret
	ret
	
Memcopy:
	ld a, [de]
	ld [hli], a 	  ; Load byte into value at hl
	inc de			  ; Point to next tetronimo byte
	dec bc 			  ;
	ld a, b     	  ; Load b into a to check if we've reached 0 yet
	or a, c     	  ; Set's 0 flag if we reached 0
	jp nz, Memcopy; Continue loop until we finished copying all tetronimo bytes
	ret

Tiles:
	; $00
	dw `00000000
	dw `00000000
	dw `00000000
	dw `00000000
	dw `00000000
	dw `00000000
	dw `00000000
	dw `00000000
	; $01
	dw `33333333
	dw `33333333
	dw `33333333
	dw `33333333
	dw `33333333
	dw `33333333
	dw `33333333
	dw `33333333
	; $02
	dw `33333333
	dw `31111113
	dw `31111113
	dw `31111113
	dw `31111113
	dw `31111113
	dw `31111113
	dw `33333333
	; $03
	dw `33333333
	dw `31111113
	dw `31111113
	dw `31111113
	dw `31111113
	dw `31111113
	dw `31111113
	dw `31111113
	; $04
	dw `31111113
	dw `31111113
	dw `31111113
	dw `31111113
	dw `31111113
	dw `31111113
	dw `31111113
	dw `31111113
	; $05
	dw `31111113
	dw `31111113
	dw `31111113
	dw `31111113
	dw `31111113
	dw `31111113
	dw `31111113
	dw `33333333
TilesEnd:

Tilemap:
	db $03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $03, $01, $01, $01, $01, $01, $01, $01, $01, 0,0,0,0,0,0,0,0,0,0,0,0,
	db $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $01, $01, $01, $01, $01, $01, $01, $01, 0,0,0,0,0,0,0,0,0,0,0,0,
	db $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $01, $01, $01, $01, $01, $01, $01, $01, 0,0,0,0,0,0,0,0,0,0,0,0,
	db $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $01, $01, $01, $01, $01, $01, $01, $01, 0,0,0,0,0,0,0,0,0,0,0,0,
	db $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $01, $01, $01, $01, $01, $01, $01, $01, 0,0,0,0,0,0,0,0,0,0,0,0,
	db $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $01, $01, $01, $01, $01, $01, $01, $01, 0,0,0,0,0,0,0,0,0,0,0,0,
	db $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $01, $01, $01, $01, $01, $01, $01, $01, 0,0,0,0,0,0,0,0,0,0,0,0,
	db $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $01, $01, $01, $01, $01, $01, $01, $01, 0,0,0,0,0,0,0,0,0,0,0,0,
	db $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $01, $01, $01, $01, $01, $01, $01, $01, 0,0,0,0,0,0,0,0,0,0,0,0,
	db $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $01, $01, $01, $01, $01, $01, $01, $01, 0,0,0,0,0,0,0,0,0,0,0,0,
	db $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $01, $01, $01, $01, $01, $01, $01, $01, 0,0,0,0,0,0,0,0,0,0,0,0,
	db $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $01, $01, $01, $01, $01, $01, $01, $01, 0,0,0,0,0,0,0,0,0,0,0,0,
	db $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $01, $01, $01, $01, $01, $01, $01, $01, 0,0,0,0,0,0,0,0,0,0,0,0,
	db $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $01, $01, $01, $01, $01, $01, $01, $01, 0,0,0,0,0,0,0,0,0,0,0,0,
	db $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $01, $01, $01, $01, $01, $01, $01, $01, 0,0,0,0,0,0,0,0,0,0,0,0,
	db $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $01, $01, $01, $01, $01, $01, $01, $01, 0,0,0,0,0,0,0,0,0,0,0,0,
	db $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $01, $01, $01, $01, $01, $01, $01, $01, 0,0,0,0,0,0,0,0,0,0,0,0,
	db $05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $05, $01, $01, $01, $01, $01, $01, $01, $01, 0,0,0,0,0,0,0,0,0,0,0,0,
TilemapEnd:

Box:
	dw `33333333
	dw `31111113
	dw `31111113
	dw `31111113
	dw `31111113
	dw `31111113
	dw `31111113
	dw `33333333
BoxEnd:

; =======DECLARING GLOBAL VARIABLES=========
SECTION "Counter", WRAM0
wFrameCounter: db
moveDirection: db

SECTION "Input Variables", WRAM0
wCurKeys: db
wNewKeys: db
