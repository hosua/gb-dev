INCLUDE "hardware.inc"

SECTION "Header", ROM0[$100]

; rgbds is dest, src
; brackes [arg] indicates a dereference, i.e., take the value stored in address arg

	jp EntryPoint

	; ds (define space) is reserving 150 bytes, second optional arg 0
	; indiciates that we are initializing this chunk of memory to 0
	; @ stands for the current memory address that are at
	ds $150 - @, 0 ; Make room for the header

EntryPoint:
	; Program starts here

WaitVBlank:
	ld a, [rLY]
	; cp = compare a-r (a being the value stored in register a). 
	; This sets carry flag if a-r results in a negative number.
	cp 144 
	jp c, WaitVBlank ; jump if carry flag was set

	; Turn the LCD off
	ld a, 0
	ld [rLCDC], a

	; Copy the tile data
	ld de, Tiles
	ld hl, $9000
	ld bc, TilesEnd - Tiles

CopyTiles:
	ld a, [de]
	ld [hli], a
	inc de
	dec bc
	ld a, b
	or a, c
	jp nz, CopyTiles

	; Copy the tilemap
	ld de, Tilemap
	ld hl, $9800
	ld bc, TilemapEnd - Tilemap

CopyTilemap:
	ld a, [de]
	ld [hli], a
	inc de
	dec bc
	ld a, b
	or a, c
	jp nz, CopyTilemap
	
	; Object Attribute Memory will be filled with garbage data, so we should clear it first.

 
 	; Copy the tile data
 	ld de, Paddle
 	ld hl, $8000 ; Address of our first non-shared tile (tile index 0)
 	ld bc, PaddleEnd - Paddle
CopyPaddle:
	ld a, [de]  	  ; Load paddle byte into register a
	ld [hli], a 	  ; Load paddle byte into value at hl
	inc de			  ; Point to next paddle byte
	dec bc 			  ;
	ld a, b     	  ; Load b into a to check if we've reached 0 yet
	or a, c     	  ; Set's 0 flag if we reached 0
	jp nz, CopyPaddle ; Continue loop until we finished copying all paddle bytes

	; Clear the Object Attribute Memory (OAM)
	ld a, 0	  ; We want to initialize OAM to 0. Store 0 into register a
	ld b, 160 ; OAM is always 160 bytes long, store this size into register b
	ld hl, _OAMRAM ; store the _OAMRAM register address into hl
ClearOam:
	ld [hli], a ; Fill the current OAM byte with 0 (we stored 0 into register a earlier)
	dec b
	jp nz, ClearOam

	; We should only ever work with OAM, when the LCD is off. We already turned
	; it off earlier in WaitVBlank, so we can safely proceed.

	; Once the OAM is clear, we can draw an object by writing its properties.

	; Each object in OAM is 4 bytes and stores the following data in this order:
	; Y, X, TILE ID, Attributes
	ld hl, _OAMRAM
	; The Y and X coordinate bytes in OAM do not store its on-screen position, they store
	; X stores the on-screen position minus 8, and
	; Y stores the on-screen position minus 16

	; The object's top-most pixel is 128 pixels from the top of the screen 
	; (remember, +16 because OAM doesn't store the exact object's screen position)
	ld a, 128 + 16 
	ld [hli], a    ; Store the object's Y value
	; The object's left-most pixel is 16 pixels from the left of the screen 
	; (remember, +8 because OAM doesn't store the exact object's screen position)
	ld a, 16 + 8   ; 
	ld [hli], a    ; Store the object's X value
	ld a, 0		   ; Store 0 in register a
	ld [hli], a    ; Set Object's Tile ID to 0
	ld [hl], a	   ; Set Object's Attributes to 0
 
 	; The Tile IDs 0-127 not shared by the objects and the backgrounds
 	; The Tile IDs 128-255 are shared by both, which is useful if we have tiles
 	; that are used in both the background and by an object
 	; In the Emulicious' Tilemap viewer, these tile sections separated by lines.
 	; I'm still unsure about what the third section is -- read more into this?
	
	; Before we can use our objects, we must ensure to enable them with the
	; LCDCF_OBJON flag! Otherwise they won't render.

	; Now that we're done working with OAM, turn the LCD on and enable objects
	ld a, LCDCF_ON | LCDCF_BGON | LCDCF_OBJON
	ld [rLCDC], a ; Store flags stored into a into our rLCDC register

	; During the first (blank) frame, initialize the display registers
	ld a, %11100100
	ld [rBGP], a    ; rBGP -- register for background palette data
	ld a, %11100100
	ld [rOBP0], a   ; r0BP0 -- register for Object palette data 0 -- what does this mean??
	
	; Initialize wFrameCounter=0
	ld a, 0
	ld [wFrameCounter], a

Main: 
	; Wait until it's *not* VBlank
	ld a, [rLY] ; register for LCDC Y-Coordinate
	cp 144      ; compare register a-144
	jp nc, Main ; Repeat main loop while a < 144

WaitVBlank2:
	ld a, [rLY]
	cp 144
	jp c, WaitVBlank2
	
	; Increment wFrameCounter
	ld a, [wFrameCounter]
	inc a
	ld [wFrameCounter], a

	cp a, 15 ; Every 15 frames (1/4th of a second), run the following code
	jp nz, Main

	; Reset the frame counter back to 0
	ld a, 0
	ld [wFrameCounter], a

	; =============MOVEMENT LOGIC==============
	; Move the paddle one pixel to the right
	ld a, [_OAMRAM + 1]
	inc a
	ld [_OAMRAM + 1], a
	jp Main

Tiles:
	dw `33333333
	dw `33333333
	dw `33333333
	dw `33322222
	dw `33322222
	dw `33322222
	dw `33322211
	dw `33322211
	dw `33333333
	dw `33333333
	dw `33333333
	dw `22222222
	dw `22222222
	dw `22222222
	dw `11111111
	dw `11111111
	dw `33333333
	dw `33333333
	dw `33333333
	dw `22222333
	dw `22222333
	dw `22222333
	dw `11222333
	dw `11222333
	dw `33333333
	dw `33333333
	dw `33333333
	dw `33333333
	dw `33333333
	dw `33333333
	dw `33333333
	dw `33333333
	dw `33322211
	dw `33322211
	dw `33322211
	dw `33322211
	dw `33322211
	dw `33322211
	dw `33322211
	dw `33322211
	dw `22222222
	dw `20000000
	dw `20111111
	dw `20111111
	dw `20111111
	dw `20111111
	dw `22222222
	dw `33333333
	dw `22222223
	dw `00000023
	dw `11111123
	dw `11111123
	dw `11111123
	dw `11111123
	dw `22222223
	dw `33333333
	dw `11222333
	dw `11222333
	dw `11222333
	dw `11222333
	dw `11222333
	dw `11222333
	dw `11222333
	dw `11222333
	dw `00000000
	dw `00000000
	dw `00000000
	dw `00000000
	dw `00000000
	dw `00000000
	dw `00000000
	dw `00000000
	dw `11001100
	dw `11111111
	dw `11111111
	dw `21212121
	dw `22222222
	dw `22322232
	dw `23232323
	dw `33333333
	; Paste your logo here:
	dw `22222222
	dw `22222222
	dw `22222222
	dw `22222222
	dw `22222222
	dw `22222211
	dw `22222211
	dw `22222211
	dw `22222222
	dw `22222222
	dw `22222222
	dw `11111111
	dw `11111111
	dw `11221111
	dw `11221111
	dw `11000011
	dw `22222222
	dw `22222222
	dw `22222222
	dw `22222222
	dw `22222222
	dw `11222222
	dw `11222222
	dw `11222222
	dw `22222222
	dw `22222222
	dw `22222222
	dw `22222222
	dw `22222222
	dw `22222222
	dw `22222222
	dw `22222222
	dw `22222211
	dw `22222200
	dw `22222200
	dw `22000000
	dw `22000000
	dw `22222222
	dw `22222222
	dw `22222222
	dw `11000011
	dw `11111111
	dw `11111111
	dw `11111111
	dw `11111111
	dw `11111111
	dw `11111111
	dw `11000022
	dw `11222222
	dw `11222222
	dw `11222222
	dw `22222222
	dw `22222222
	dw `22222222
	dw `22222222
	dw `22222222
	dw `22222222
	dw `22222222
	dw `22222222
	dw `22222222
	dw `22222222
	dw `22222222
	dw `22222222
	dw `22222222
	dw `22222222
	dw `22222200
	dw `22222200
	dw `22222211
	dw `22222211
	dw `22221111
	dw `22221111
	dw `22221111
	dw `11000022
	dw `00112222
	dw `00112222
	dw `11112200
	dw `11112200
	dw `11220000
	dw `11220000
	dw `11220000
	dw `22222222
	dw `22222222
	dw `22222222
	dw `22000000
	dw `22000000
	dw `00000000
	dw `00000000
	dw `00000000
	dw `22222222
	dw `22222222
	dw `22222222
	dw `22222222
	dw `22222222
	dw `11110022
	dw `11110022
	dw `11110022
	dw `22221111
	dw `22221111
	dw `22221111
	dw `22221111
	dw `22221111
	dw `22222211
	dw `22222211
	dw `22222222
	dw `11220000
	dw `11110000
	dw `11110000
	dw `11111111
	dw `11111111
	dw `11111111
	dw `11111111
	dw `22222222
	dw `00000000
	dw `00111111
	dw `00111111
	dw `11111111
	dw `11111111
	dw `11111111
	dw `11111111
	dw `22222222
	dw `11110022
	dw `11000022
	dw `11000022
	dw `00002222
	dw `00002222
	dw `00222222
	dw `00222222
	dw `22222222
TilesEnd:

Tilemap:
	db $00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $02, $03, $03, $03, $03, $03, $03, 0,0,0,0,0,0,0,0,0,0,0,0
	db $04, $05, $06, $05, $06, $05, $06, $05, $06, $05, $06, $05, $06, $07, $03, $03, $03, $03, $03, $03, 0,0,0,0,0,0,0,0,0,0,0,0
	db $04, $08, $05, $06, $05, $06, $05, $06, $05, $06, $05, $06, $08, $07, $03, $03, $03, $03, $03, $03, 0,0,0,0,0,0,0,0,0,0,0,0
	db $04, $05, $06, $05, $06, $05, $06, $05, $06, $05, $06, $05, $06, $07, $03, $03, $03, $03, $03, $03, 0,0,0,0,0,0,0,0,0,0,0,0
	db $04, $08, $05, $06, $05, $06, $05, $06, $05, $06, $05, $06, $08, $07, $03, $03, $03, $03, $03, $03, 0,0,0,0,0,0,0,0,0,0,0,0
	db $04, $05, $06, $05, $06, $05, $06, $05, $06, $05, $06, $05, $06, $07, $03, $03, $03, $03, $03, $03, 0,0,0,0,0,0,0,0,0,0,0,0
	db $04, $08, $05, $06, $05, $06, $05, $06, $05, $06, $05, $06, $08, $07, $03, $03, $03, $03, $03, $03, 0,0,0,0,0,0,0,0,0,0,0,0
	db $04, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $07, $03, $03, $03, $03, $03, $03, 0,0,0,0,0,0,0,0,0,0,0,0
	db $04, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $07, $03, $03, $03, $03, $03, $03, 0,0,0,0,0,0,0,0,0,0,0,0
	db $04, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $07, $03, $03, $03, $03, $03, $03, 0,0,0,0,0,0,0,0,0,0,0,0
	db $04, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $07, $03, $03, $03, $03, $03, $03, 0,0,0,0,0,0,0,0,0,0,0,0
	db $04, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $07, $03, $03, $03, $03, $03, $03, 0,0,0,0,0,0,0,0,0,0,0,0
	db $04, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $07, $03, $03, $03, $03, $03, $03, 0,0,0,0,0,0,0,0,0,0,0,0
	db $04, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $07, $03, $0A, $0B, $0C, $0D, $03, 0,0,0,0,0,0,0,0,0,0,0,0
	db $04, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $07, $03, $0E, $0F, $10, $11, $03, 0,0,0,0,0,0,0,0,0,0,0,0
	db $04, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $07, $03, $12, $13, $14, $15, $03, 0,0,0,0,0,0,0,0,0,0,0,0
	db $04, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $07, $03, $16, $17, $18, $19, $03, 0,0,0,0,0,0,0,0,0,0,0,0
	db $04, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $07, $03, $03, $03, $03, $03, $03, 0,0,0,0,0,0,0,0,0,0,0,0
TilemapEnd:

Paddle:
	dw `13333331
	dw `30000003
	dw `13333331
	dw `00000000
	dw `00000000
	dw `00000000
	dw `00000000
	dw `00000000
PaddleEnd:

; =======DECLARING GLOBAL VARIABLES=========
SECTION "Counter", WRAM0
wFrameCounter: db
